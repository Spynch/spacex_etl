version: '3.5'
x-airflow-common:
  &airflow-common
  build: .
  env_file:
      - ./.env
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'False'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__CORE__TEST_CONNECTION: 'Enabled'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    AIRFLOW_CONN_SERVER_PUBLICIST: 'postgresql://${POSTGRES_PUBLICIST_USER}:${POSTGRES_PUBLICIST_PASSWORD}@host.docker.internal:5431/${POSTGRES_PUBLICIST_DB}'

    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/plugins:/opt/airflow/plugins
    - ./dbt:/mnt/dbt
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy
    server_publicist:
      condition: service_healthy
    

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always

  redis:
    image: redis:latest
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    extra_hosts:
      - "host.docker.internal:host-gateway"

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash

    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version

    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}/airflow:/sources

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"

    command:
      - bash
      - -c
      - airflow


  flower:
    <<: *airflow-common
    command: celery flower
    profiles:
      - flower
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully


##### поднятие транзакционного PSQL(создана логическая репликация через публикацию) #####
  server_publicist:
    image: postgres:14
    container_name: server_publicist
    restart: always
    ports:
      - '5431:5432'
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"
      - "-c"
      - "work_mem=512MB"
    volumes:
      - './postgres/server_publicist:/docker-entrypoint-initdb.d/'
    environment:
      POSTGRES_USER: ${POSTGRES_PUBLICIST_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PUBLICIST_PASSWORD}
      POSTGRES_DB: ${POSTGRES_PUBLICIST_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_PUBLICIST_USER} -d ${POSTGRES_PUBLICIST_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      replication_network:
        ipv4_address: 192.168.1.2
      data_postgres:


####   Сервер подписчика с данного сервера будем брать данные и класть в CH####
  server_subscription:
    image: postgres:14
    container_name: server_subscription
    ports:
      - '5433:5432'
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"
      - "-c"
      - "work_mem=512MB"
    restart: unless-stopped
    volumes:
      - './postgres/server_subscription:/docker-entrypoint-initdb.d/'
    environment:
      POSTGRES_USER: ${POSTGRES_SUBSCRIPTION_USER}
      POSTGRES_PASSWORD: ${POSTGRES_SUBSCRIPTION_PASSWORD}
      POSTGRES_DB: ${POSTGRES_SUBSCRIPTION_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_SUBSCRIPTION_USER} -d ${POSTGRES_SUBSCRIPTION_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      replication_network:
        ipv4_address: 192.168.1.3
      data_postgres:
      click_net:
        ipv4_address: 192.168.2.3
    depends_on:
      server_publicist:
        condition: service_healthy

# Создание сервера ClickHouse
  server_clickhouse:
    image: clickhouse/clickhouse-server
    container_name: server_clickhouse
    ports: 
      - 8123:8123
    restart: unless-stopped
    environment:
      CLICKHOUSE_USER: ${CLICKHOUSE_USER}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
      CLICKHOUSE_DB: ${CLICKHOUSE_DB}
      POSTGRES_SUBSCRIPTION_PASSWORD: ${POSTGRES_SUBSCRIPTION_PASSWORD}
    volumes:
      # - './clickhouse/ch_data:/var/lib/clickhouse/'
      # - './clickhouse/ch_data:/var/log/clickhouse-server/'
      - './clickhouse/ch_command:/docker-entrypoint-initdb.d/'
    networks:
      click_net:
        ipv4_address: 192.168.2.2
      metanet:
        ipv4_address: 192.168.3.2
    depends_on:
      server_subscription:
        condition: service_healthy

#### Create PGAdmin ####
  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4:8.4
    environment:
      PGADMIN_DEFAULT_EMAIL: "ShustikGF@yandex.ru"
      PGADMIN_DEFAULT_PASSWORD: "gfh0km"
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    ports:
      - "5050:80"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
    networks:
      - data_postgres

### Создание BI системы Metabase
  metabase:
    build: ./metabase/
    container_name: metabase
    hostname: metabase
    ports:
      - 3000:3000
    environment:
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: metabaseappdb
      MB_DB_PORT: 5432
      MB_DB_USER: metabase
      MB_DB_PASS: mysecretpassword
      MB_DB_HOST: postgres
    networks:
      metanet:
          ipv4_address: 192.168.3.4
      metanet1:
    volumes:
      - metabasevol:/var/lib/docker/volumes/metabasevol/_data
    healthcheck:
      test: curl --fail -I http://localhost:3000/api/health || exit 1
      interval: 15s
      timeout: 5s
      retries: 5

  postgres_metabase:
    image: postgres:latest
    container_name: postgres
    hostname: postgres
    environment:
      POSTGRES_USER: metabase
      POSTGRES_DB: metabaseappdb
      POSTGRES_PASSWORD: mysecretpassword
    # volumes:
    #   - pgdata:/var/lib/postgresql/data/pgdata
    networks:
      metanet1:



#####  Allocated disk space  #####
volumes:
  postgres-db-volume:  # выделено по умолчанию для AirFlow
  pgadmin-data:
  pgdata:
  metabasevol:

#####  Settings Networks  #####
networks:
  data_postgres:
    driver: bridge
    name: network_data_postgres
  replication_network:
    name: localnet
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 192.168.1.0/24
  click_net:
    name: clicknet
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 192.168.2.0/24
  metanet:
    name: metanet
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 192.168.3.0/24   
  metanet1:
    driver: bridge
